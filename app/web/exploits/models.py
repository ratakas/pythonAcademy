from marshmallow_jsonapi import Schema, fields
from marshmallow import validate
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.exc import SQLAlchemyError

db = SQLAlchemy()

class exploit(db.Model):
	__tablename__='exploit'
	id = db.Column(db.String(512), primary_key=True)
	category_id = db.Column(db.Integer)
	title = db.Column(db.String(512))
	url = db.Column(db.Text)
	content = db.Column(db.Text)
	#timestrap = db.Column(db.String(512))
	timestrap = db.Column(db.DateTime)
	#timepost = db.Column(db.String(512))
	timepost = db.Column(db.DateTime)
	category_id = db.Column(db.Integer, db.ForeignKey('category.category_id'))
	category = db.relationship('category',backref=db.backref('exploits', lazy='dynamic'))

	def __init__(self, id,category_id, title,url,content,timestrap=None,timepost=None):
		self.id = id
		self.category_id = category_id
		self.title = title
		self.url = url
		self.content = content
		self.timestrap = timestrap
		self.timepost = timepost
	
	def __repr__(self):
		return '<title %r>' % self.title

class category(db.Model):
	__tablename__='category'
	category_id = db.Column(db.Integer, primary_key=True)
	name = db.Column(db.String(50))

	def __init__(self, category_id,name):
		self.category_id = category_id
		self.name = name

	def __repr__(self):
		return '<Category %r>' % self.name

class ExploitSchema(Schema):
	
	not_blank = validate.Length(min=1, error='Field cannot be blank')
	id = fields.String(validate=not_blank)
	category_id = fields.String(validate=not_blank)
	title = fields.String(validate=not_blank)
	url = fields.String(validate=not_blank)
	content = fields.String(validate=not_blank)
	timestrap = fields.DateTime(validate=not_blank)
	timepost = fields.DateTime(validate=not_blank)

	class Meta:
			type_ = 'exploits'


